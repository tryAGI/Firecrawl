openapi: 3.0.4
info:
  title: Firecrawl API
  description: API for interacting with Firecrawl services to perform web scraping and crawling tasks.
  contact:
    name: Firecrawl Support
    url: https://firecrawl.dev/support
    email: support@firecrawl.dev
  version: v1
servers:
  - url: https://api.firecrawl.dev/v1
paths:
  /scrape:
    post:
      tags:
        - Scraping
      summary: Scrape a single URL and optionally extract information using an LLM
      operationId: scrapeAndExtractFromUrl
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - required:
                    - url
                  type: object
                  properties:
                    url:
                      type: string
                      description: The URL to scrape
                      format: uri
                - $ref: '#/components/schemas/ScrapeOptions'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapeResponse'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  /batch/scrape:
    post:
      tags:
        - Scraping
      summary: Scrape multiple URLs and optionally extract information using an LLM
      operationId: scrapeAndExtractFromUrls
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - required:
                    - urls
                  type: object
                  properties:
                    urls:
                      type: array
                      items:
                        type: string
                        description: The URL to scrape
                        format: uri
                    webhook:
                      required:
                        - url
                      type: object
                      properties:
                        url:
                          type: string
                          description: 'The URL to send the webhook to. This will trigger for batch scrape started (batch_scrape.started), every page scraped (batch_scrape.page) and when the batch scrape is completed (batch_scrape.completed or batch_scrape.failed). The response will be the same as the `/scrape` endpoint.'
                        headers:
                          type: object
                          additionalProperties:
                            type: string
                          description: Headers to send to the webhook URL.
                        metadata:
                          type: object
                          description: Custom metadata that will be included in all webhook payloads for this crawl
                        events:
                          type: array
                          items:
                            enum:
                              - completed
                              - page
                              - failed
                              - started
                            type: string
                          description: 'Type of events that should be sent to the webhook URL. (default: all)'
                      description: A webhook specification object.
                    ignoreInvalidURLs:
                      type: boolean
                      description: 'If invalid URLs are specified in the urls array, they will be ignored. Instead of them failing the entire request, a batch scrape using the remaining valid URLs will be created, and the invalid URLs will be returned in the invalidURLs field of the response.'
                      default: false
                - $ref: '#/components/schemas/ScrapeOptions'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchScrapeResponseObj'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  '/batch/scrape/{id}':
    get:
      tags:
        - Scraping
      summary: Get the status of a batch scrape job
      operationId: getBatchScrapeStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchScrapeStatusResponseObj'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - Scraping
      summary: Cancel a batch scrape job
      operationId: cancelBatchScrape
      responses:
        '200':
          description: Successful cancellation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Batch scrape job successfully cancelled.
        '404':
          description: Batch scrape job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Batch scrape job not found.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the batch scrape job
        required: true
        schema:
          type: string
          format: uuid
  '/batch/scrape/{id}/errors':
    get:
      tags:
        - Scraping
      summary: Get the errors of a batch scrape job
      operationId: getBatchScrapeErrors
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlErrorsResponseObj'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the batch scrape job
        required: true
        schema:
          type: string
          format: uuid
  '/crawl/{id}':
    get:
      tags:
        - Crawling
      summary: Get the status of a crawl job
      operationId: getCrawlStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlStatusResponseObj'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - Crawling
      summary: Cancel a crawl job
      operationId: cancelCrawl
      responses:
        '200':
          description: Successful cancellation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    enum:
                      - cancelled
                    type: string
                    example: cancelled
        '404':
          description: Crawl job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Crawl job not found.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the crawl job
        required: true
        schema:
          type: string
          format: uuid
  '/crawl/{id}/errors':
    get:
      tags:
        - Crawling
      summary: Get the errors of a crawl job
      operationId: getCrawlErrors
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlErrorsResponseObj'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the crawl job
        required: true
        schema:
          type: string
          format: uuid
  /crawl:
    post:
      tags:
        - Crawling
      summary: Crawl multiple URLs based on options
      operationId: crawlUrls
      requestBody:
        content:
          application/json:
            schema:
              required:
                - url
              type: object
              properties:
                url:
                  type: string
                  description: The base URL to start crawling from
                  format: uri
                excludePaths:
                  type: array
                  items:
                    type: string
                  description: 'URL pathname regex patterns that exclude matching URLs from the crawl. For example, if you set "excludePaths": ["blog/.*"] for the base URL firecrawl.dev, any results matching that pattern will be excluded, such as https://www.firecrawl.dev/blog/firecrawl-launch-week-1-recap.'
                includePaths:
                  type: array
                  items:
                    type: string
                  description: 'URL pathname regex patterns that include matching URLs in the crawl. Only the paths that match the specified patterns will be included in the response. For example, if you set "includePaths": ["blog/.*"] for the base URL firecrawl.dev, only results matching that pattern will be included, such as https://www.firecrawl.dev/blog/firecrawl-launch-week-1-recap.'
                maxDepth:
                  type: integer
                  description: 'Maximum depth to crawl relative to the base URL. Basically, the max number of slashes the pathname of a scraped URL may contain.'
                  default: 10
                maxDiscoveryDepth:
                  type: integer
                  description: 'Maximum depth to crawl based on discovery order. The root site and sitemapped pages has a discovery depth of 0. For example, if you set it to 1, and you set ignoreSitemap, you will only crawl the entered URL and all URLs that are linked on that page.'
                ignoreSitemap:
                  type: boolean
                  description: Ignore the website sitemap when crawling
                  default: false
                ignoreQueryParameters:
                  type: boolean
                  description: Do not re-scrape the same path with different (or none) query parameters
                  default: false
                limit:
                  type: integer
                  description: Maximum number of pages to crawl. Default limit is 10000.
                  default: 10000
                allowBackwardLinks:
                  type: boolean
                  description: "Allows the crawler to follow internal links to sibling or parent URLs, not just child paths.\n\nfalse: Only crawls deeper (child) URLs.\n→ e.g. /features/feature-1 → /features/feature-1/tips ✅\n→ Won't follow /pricing or / ❌\n\ntrue: Crawls any internal links, including siblings and parents.\n→ e.g. /features/feature-1 → /pricing, /, etc. ✅\n\nUse true for broader internal coverage beyond nested paths."
                  default: false
                allowExternalLinks:
                  type: boolean
                  description: Allows the crawler to follow links to external websites.
                  default: false
                delay:
                  type: number
                  description: Delay in seconds between scrapes. This helps respect website rate limits.
                webhook:
                  required:
                    - url
                  type: object
                  properties:
                    url:
                      type: string
                      description: 'The URL to send the webhook to. This will trigger for crawl started (crawl.started), every page crawled (crawl.page) and when the crawl is completed (crawl.completed or crawl.failed). The response will be the same as the `/scrape` endpoint.'
                    headers:
                      type: object
                      additionalProperties:
                        type: string
                      description: Headers to send to the webhook URL.
                    metadata:
                      type: object
                      description: Custom metadata that will be included in all webhook payloads for this crawl
                    events:
                      type: array
                      items:
                        enum:
                          - completed
                          - page
                          - failed
                          - started
                        type: string
                      description: 'Type of events that should be sent to the webhook URL. (default: all)'
                  description: A webhook specification object.
                scrapeOptions:
                  $ref: '#/components/schemas/ScrapeOptions'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlResponse'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  /map:
    post:
      tags:
        - Mapping
      summary: Map multiple URLs based on options
      operationId: mapUrls
      requestBody:
        content:
          application/json:
            schema:
              required:
                - url
              type: object
              properties:
                url:
                  type: string
                  description: The base URL to start crawling from
                  format: uri
                search:
                  type: string
                  description: 'Search query to use for mapping. During the Alpha phase, the ''smart'' part of the search functionality is limited to 1000 search results. However, if map finds more results, there is no limit applied.'
                ignoreSitemap:
                  type: boolean
                  description: Ignore the website sitemap when crawling.
                  default: true
                sitemapOnly:
                  type: boolean
                  description: Only return links found in the website sitemap
                  default: false
                includeSubdomains:
                  type: boolean
                  description: Include subdomains of the website
                  default: true
                limit:
                  maximum: 30000
                  type: integer
                  description: Maximum number of links to return
                  default: 5000
                timeout:
                  type: integer
                  description: Timeout in milliseconds. There is no timeout by default.
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapResponse'
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  /extract:
    post:
      tags:
        - Extraction
      summary: Extract structured data from pages using LLMs
      operationId: extractData
      requestBody:
        content:
          application/json:
            schema:
              required:
                - urls
              type: object
              properties:
                urls:
                  type: array
                  items:
                    type: string
                    description: The URLs to extract data from. URLs should be in glob format.
                    format: uri
                prompt:
                  type: string
                  description: Prompt to guide the extraction process
                schema:
                  type: object
                  description: 'Schema to define the structure of the extracted data. Must conform to [JSON Schema](https://json-schema.org/).'
                enableWebSearch:
                  type: boolean
                  description: 'When true, the extraction will use web search to find additional data'
                  default: false
                ignoreSitemap:
                  type: boolean
                  description: 'When true, sitemap.xml files will be ignored during website scanning'
                  default: false
                includeSubdomains:
                  type: boolean
                  description: 'When true, subdomains of the provided URLs will also be scanned'
                  default: true
                showSources:
                  type: boolean
                  description: 'When true, the sources used to extract the data will be included in the response as `sources` key'
                  default: false
                scrapeOptions:
                  $ref: '#/components/schemas/ScrapeOptions'
                ignoreInvalidURLs:
                  type: boolean
                  description: 'If invalid URLs are specified in the urls array, they will be ignored. Instead of them failing the entire request, an extract using the remaining valid URLs will be performed, and the invalid URLs will be returned in the invalidURLs field of the response.'
                  default: false
        required: true
      responses:
        '200':
          description: Successful extraction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input data.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  '/extract/{id}':
    get:
      tags:
        - Extraction
      summary: Get the status of an extract job
      operationId: getExtractStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractStatusResponse'
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the extract job
        required: true
        schema:
          type: string
          format: uuid
  /crawl/active:
    get:
      tags:
        - Crawling
      summary: Get all active crawls for the authenticated team
      operationId: getActiveCrawls
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - success
                  - data
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  crawls:
                    type: array
                    items:
                      required:
                        - id
                        - teamId
                        - url
                        - status
                        - options
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier of the crawl
                          format: uuid
                        teamId:
                          type: string
                          description: The ID of the team that owns the crawl
                        url:
                          type: string
                          description: The origin URL of the crawl
                          format: uri
                        options:
                          type: object
                          properties:
                            scrapeOptions:
                              $ref: '#/components/schemas/ScrapeOptions'
                          description: The crawler options used for this crawl
        '402':
          description: Payment required
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Payment required to access this resource.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Request rate limit exceeded. Please wait and try again later.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  /deep-research:
    post:
      tags:
        - Research
      summary: Start a deep research operation on a query
      operationId: startDeepResearch
      requestBody:
        content:
          application/json:
            schema:
              required:
                - query
              type: object
              properties:
                query:
                  type: string
                  description: The query to research
                maxDepth:
                  maximum: 12
                  minimum: 1
                  type: integer
                  description: Maximum depth of research iterations
                  default: 7
                timeLimit:
                  maximum: 600
                  minimum: 30
                  type: integer
                  description: Time limit in seconds
                  default: 300
                maxUrls:
                  maximum: 1000
                  minimum: 1
                  type: integer
                  description: Maximum number of URLs to analyze
                  default: 20
                analysisPrompt:
                  type: string
                  description: The prompt to use for the final analysis. Useful to format the final analysis markdown in a specific way.
                systemPrompt:
                  type: string
                  description: The system prompt to use for the research agent. Useful to steer the research agent to a specific direction.
                formats:
                  type: array
                  items:
                    enum:
                      - markdown
                      - json
                    type: string
                    default:
                      - markdown
                jsonOptions:
                  type: object
                  properties:
                    schema:
                      type: object
                      description: 'The schema to use for the JSON output. Must conform to [JSON Schema](https://json-schema.org/).'
                    systemPrompt:
                      type: string
                      description: The system prompt to use for the JSON output
                    prompt:
                      type: string
                      description: The prompt to use for the JSON output
                  description: Options for JSON output
        required: true
      responses:
        '200':
          description: Research job started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    type: string
                    description: ID of the research job
                    format: uuid
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Invalid parameters provided
      security:
        - bearerAuth: [ ]
  '/deep-research/{id}':
    get:
      tags:
        - Research
      summary: Get the status and results of a deep research operation
      operationId: getDeepResearchStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      finalAnalysis:
                        type: string
                      json:
                        type: object
                        description: Displayed when using JSON format
                        nullable: true
                      activities:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            status:
                              type: string
                            message:
                              type: string
                            timestamp:
                              type: string
                              format: date-time
                            depth:
                              type: integer
                      sources:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                            title:
                              type: string
                            description:
                              type: string
                            favicon:
                              type: string
                      status:
                        enum:
                          - processing
                          - completed
                          - failed
                        type: string
                      error:
                        type: string
                      expiresAt:
                        type: string
                        format: date-time
                      currentDepth:
                        type: integer
                      maxDepth:
                        type: integer
                      totalUrls:
                        type: integer
        '404':
          description: Research job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Research job not found
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the research job
        required: true
        schema:
          type: string
          format: uuid
  /team/credit-usage:
    get:
      tags:
        - Billing
      summary: Get remaining credits for the authenticated team
      operationId: getCreditUsage
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      remaining_credits:
                        type: number
                        description: Number of credits remaining for the team
                        example: 1000
        '404':
          description: Credit usage information not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Could not find credit usage information
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Internal server error while fetching credit usage
      security:
        - bearerAuth: [ ]
  /team/token-usage:
    get:
      tags:
        - Billing
      summary: Get remaining tokens for the authenticated team (Extract only)
      operationId: getTokenUsage
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      remaining_tokens:
                        type: number
                        description: Number of tokens remaining for the team
                        example: 1000
        '404':
          description: Token usage information not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Could not find token usage information
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Internal server error while fetching token usage
      security:
        - bearerAuth: [ ]
  /search:
    post:
      tags:
        - Search
      summary: Search and optionally scrape search results
      operationId: searchAndScrape
      requestBody:
        content:
          application/json:
            schema:
              required:
                - query
              type: object
              properties:
                query:
                  type: string
                  description: The search query
                limit:
                  maximum: 100
                  minimum: 1
                  type: integer
                  description: Maximum number of results to return
                  default: 5
                tbs:
                  type: string
                  description: Time-based search parameter
                location:
                  type: string
                  description: Location parameter for search results
                timeout:
                  type: integer
                  description: Timeout in milliseconds
                  default: 60000
                ignoreInvalidURLs:
                  type: boolean
                  description: Excludes URLs from the search results that are invalid for other Firecrawl endpoints. This helps reduce errors if you are piping data from search into other Firecrawl API endpoints.
                  default: false
                scrapeOptions:
                  type: object
                  properties:
                    formats:
                      type: array
                      items:
                        enum:
                          - markdown
                          - html
                          - rawHtml
                          - links
                          - screenshot
                          - screenshot@fullPage
                          - json
                        type: string
                      description: Formats to include in the output
                  description: Options for scraping search results
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                          description: Title from search result
                        description:
                          type: string
                          description: Description from search result
                        url:
                          type: string
                          description: URL of the search result
                        markdown:
                          type: string
                          description: Markdown content if scraping was requested
                          nullable: true
                        html:
                          type: string
                          description: HTML content if requested in formats
                          nullable: true
                        rawHtml:
                          type: string
                          description: Raw HTML content if requested in formats
                          nullable: true
                        links:
                          type: array
                          items:
                            type: string
                          description: Links found if requested in formats
                        screenshot:
                          type: string
                          description: Screenshot URL if requested in formats
                          nullable: true
                        metadata:
                          type: object
                          properties:
                            title:
                              type: string
                            description:
                              type: string
                            sourceURL:
                              type: string
                            statusCode:
                              type: integer
                            error:
                              type: string
                              nullable: true
                  warning:
                    type: string
                    description: Warning message if any issues occurred
                    nullable: true
        '408':
          description: Request timeout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Request timed out
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: An unexpected error occurred on the server.
      security:
        - bearerAuth: [ ]
  /llmstxt:
    post:
      tags:
        - LLMs.txt
      summary: Generate LLMs.txt for a website
      operationId: generateLLMsTxt
      requestBody:
        content:
          application/json:
            schema:
              required:
                - url
              type: object
              properties:
                url:
                  type: string
                  description: The URL to generate LLMs.txt from
                  format: uri
                maxUrls:
                  type: integer
                  description: Maximum number of URLs to analyze
                  default: 2
                showFullText:
                  type: boolean
                  description: Include full text content in the response
                  default: false
        required: true
      responses:
        '200':
          description: LLMs.txt generation job started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    type: string
                    description: ID of the LLMs.txt generation job
                    format: uuid
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Invalid parameters provided
      security:
        - bearerAuth: [ ]
  '/llmstxt/{id}':
    get:
      tags:
        - LLMs.txt
      summary: Get the status and results of an LLMs.txt generation job
      operationId: getLLMsTxtStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  status:
                    enum:
                      - processing
                      - completed
                      - failed
                    type: string
                  data:
                    type: object
                    properties:
                      llmstxt:
                        type: string
                        description: The generated LLMs.txt content
                      llmsfulltxt:
                        type: string
                        description: The full text content when showFullText is true
                  expiresAt:
                    type: string
                    description: When the generated content will expire
                    format: date-time
        '404':
          description: LLMs.txt generation job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: LLMs.txt generation job not found
      security:
        - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        description: The ID of the LLMs.txt generation job
        required: true
        schema:
          type: string
          format: uuid
components:
  schemas:
    ScrapeOptions:
      type: object
      properties:
        formats:
          type: array
          items:
            enum:
              - markdown
              - html
              - rawHtml
              - links
              - screenshot
              - screenshot@fullPage
              - json
              - changeTracking
            type: string
          description: Formats to include in the output.
          default:
            - markdown
        onlyMainContent:
          type: boolean
          description: 'Only return the main content of the page excluding headers, navs, footers, etc.'
          default: true
        includeTags:
          type: array
          items:
            type: string
          description: Tags to include in the output.
        excludeTags:
          type: array
          items:
            type: string
          description: Tags to exclude from the output.
        maxAge:
          type: integer
          description: 'Returns a cached version of the page if it is younger than this age in milliseconds. If a cached version of the page is older than this value, the page will be scraped. If you do not need extremely fresh data, enabling this can speed up your scrapes by 500%. Defaults to 0, which disables caching.'
          default: 0
        headers:
          type: object
          description: 'Headers to send with the request. Can be used to send cookies, user-agent, etc.'
        waitFor:
          type: integer
          description: 'Specify a delay in milliseconds before fetching the content, allowing the page sufficient time to load.'
          default: 0
        mobile:
          type: boolean
          description: Set to true if you want to emulate scraping from a mobile device. Useful for testing responsive pages and taking mobile screenshots.
          default: false
        skipTlsVerification:
          type: boolean
          description: Skip TLS certificate verification when making requests
          default: false
        timeout:
          type: integer
          description: Timeout in milliseconds for the request
          default: 30000
        parsePDF:
          type: boolean
          description: 'Controls how PDF files are processed during scraping. When true, the PDF content is extracted and converted to markdown format, with billing based on the number of pages (1 credit per page). When false, the PDF file is returned in base64 encoding with a flat rate of 1 credit total.'
          default: true
        jsonOptions:
          type: object
          properties:
            schema:
              type: object
              description: 'The schema to use for the extraction (Optional). Must conform to [JSON Schema](https://json-schema.org/).'
            systemPrompt:
              type: string
              description: The system prompt to use for the extraction (Optional)
            prompt:
              type: string
              description: The prompt to use for the extraction without a schema (Optional)
          description: JSON options object
        actions:
          type: array
          items:
            oneOf:
              - title: Wait
                required:
                  - type
                type: object
                properties:
                  type:
                    enum:
                      - wait
                    type: string
                    description: Wait for a specified amount of milliseconds
                  milliseconds:
                    minimum: 1
                    type: integer
                    description: Number of milliseconds to wait
                  selector:
                    type: string
                    description: Query selector to find the element by
                    example: '#my-element'
              - title: Screenshot
                required:
                  - type
                type: object
                properties:
                  type:
                    enum:
                      - screenshot
                    type: string
                    description: Take a screenshot. The links will be in the response's `actions.screenshots` array.
                  fullPage:
                    type: boolean
                    description: Should the screenshot be full-page or viewport sized?
                    default: false
              - title: Click
                required:
                  - type
                  - selector
                type: object
                properties:
                  type:
                    enum:
                      - click
                    type: string
                    description: Click on an element
                  selector:
                    type: string
                    description: Query selector to find the element by
                    example: '#load-more-button'
                  all:
                    type: boolean
                    description: 'Clicks all elements matched by the selector, not just the first one. Does not throw an error if no elements match the selector.'
                    default: false
              - title: Write text
                required:
                  - type
                  - text
                type: object
                properties:
                  type:
                    enum:
                      - write
                    type: string
                    description: 'Write text into an input field, text area, or contenteditable element. Note: You must first focus the element using a ''click'' action before writing. The text will be typed character by character to simulate keyboard input.'
                  text:
                    type: string
                    description: Text to type
                    example: 'Hello, world!'
              - title: Press a key
                required:
                  - type
                  - key
                type: object
                properties:
                  type:
                    enum:
                      - press
                    type: string
                    description: Press a key on the page
                  key:
                    type: string
                    description: Key to press
                    example: Enter
                description: Press a key on the page. See https://asawicki.info/nosense/doc/devices/keyboard/key_codes.html for key codes.
              - title: Scroll
                required:
                  - type
                type: object
                properties:
                  type:
                    enum:
                      - scroll
                    type: string
                    description: Scroll the page or a specific element
                  direction:
                    enum:
                      - up
                      - down
                    type: string
                    description: Direction to scroll
                    default: down
                  selector:
                    type: string
                    description: Query selector for the element to scroll
                    example: '#my-element'
              - title: Scrape
                required:
                  - type
                type: object
                properties:
                  type:
                    enum:
                      - scrape
                    type: string
                    description: 'Scrape the current page content, returns the url and the html.'
              - title: Execute JavaScript
                required:
                  - type
                  - script
                type: object
                properties:
                  type:
                    enum:
                      - executeJavascript
                    type: string
                    description: Execute JavaScript code on the page
                  script:
                    type: string
                    description: JavaScript code to execute
                    example: document.querySelector('.button').click();
          description: Actions to perform on the page before grabbing the content
        location:
          type: object
          properties:
            country:
              pattern: '^[A-Z]{2}$'
              type: string
              description: 'ISO 3166-1 alpha-2 country code (e.g., ''US'', ''AU'', ''DE'', ''JP'')'
              default: US
            languages:
              type: array
              items:
                type: string
                example: en-US
              description: Preferred languages and locales for the request in order of priority. Defaults to the language of the specified location. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language
          description: 'Location settings for the request. When specified, this will use an appropriate proxy if available and emulate the corresponding language and timezone settings. Defaults to ''US'' if not specified.'
        removeBase64Images:
          type: boolean
          description: 'Removes all base 64 images from the output, which may be overwhelmingly long. The image''s alt text remains in the output, but the URL is replaced with a placeholder.'
        blockAds:
          type: boolean
          description: Enables ad-blocking and cookie popup blocking.
          default: true
        proxy:
          enum:
            - basic
            - stealth
            - auto
          type: string
          description: "Specifies the type of proxy to use.\n\n - **basic**: Proxies for scraping sites with none to basic anti-bot solutions. Fast and usually works.\n - **stealth**: Stealth proxies for scraping sites with advanced anti-bot solutions. Slower, but more reliable on certain sites. Costs up to 5 credits per request.\n - **auto**: Firecrawl will automatically retry scraping with stealth proxies if the basic proxy fails. If the retry with stealth is successful, 5 credits will be billed for the scrape. If the first attempt with basic is successful, only the regular cost will be billed.\n\nIf you do not specify a proxy, Firecrawl will default to basic."
        changeTrackingOptions:
          type: object
          properties:
            modes:
              type: array
              items:
                enum:
                  - git-diff
                  - json
                type: string
              description: 'The mode to use for change tracking. ''git-diff'' provides a detailed diff, and ''json'' compares extracted JSON data.'
            schema:
              type: object
              description: 'Schema for JSON extraction when using ''json'' mode. Defines the structure of data to extract and compare. Must conform to [JSON Schema](https://json-schema.org/).'
            prompt:
              type: string
              description: 'Prompt to use for change tracking when using ''json'' mode. If not provided, the default prompt will be used.'
            tag:
              type: string
              description: 'Tag to use for change tracking. Tags can separate change tracking history into separate "branches", where change tracking with a specific tagwill only compare to scrapes made in the same tag. If not provided, the default tag (null) will be used.'
              default: 
              nullable: true
          description: Options for change tracking (Beta). Only applicable when 'changeTracking' is included in formats. The 'markdown' format must also be specified when using change tracking.
        storeInCache:
          type: boolean
          description: 'If true, the page will be stored in the Firecrawl index and cache. Setting this to false is useful if your scraping activity may have data protection concerns. Using some parameters associated with sensitive scraping (actions, headers) will force this parameter to be false.'
          default: true
    ScrapeResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            markdown:
              type: string
            html:
              type: string
              description: HTML version of the content on page if `html` is in `formats`
              nullable: true
            rawHtml:
              type: string
              description: Raw HTML content of the page if `rawHtml` is in `formats`
              nullable: true
            screenshot:
              type: string
              description: Screenshot of the page if `screenshot` is in `formats`
              nullable: true
            links:
              type: array
              items:
                type: string
              description: List of links on the page if `links` is in `formats`
            actions:
              type: object
              properties:
                screenshots:
                  type: array
                  items:
                    type: string
                    format: url
                  description: 'Screenshot URLs, in the same order as the screenshot actions provided.'
                scrapes:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                      html:
                        type: string
                  description: 'Scrape contents, in the same order as the scrape actions provided.'
                javascriptReturns:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      value: { }
                  description: 'JavaScript return values, in the same order as the executeJavascript actions provided.'
              description: Results of the actions specified in the `actions` parameter. Only present if the `actions` parameter was provided in the request
              nullable: true
            metadata:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                language:
                  type: string
                  nullable: true
                sourceURL:
                  type: string
                  format: uri
                '<any other metadata> ':
                  type: string
                statusCode:
                  type: integer
                  description: The status code of the page
                error:
                  type: string
                  description: The error message of the page
                  nullable: true
            llm_extraction:
              type: object
              description: Displayed when using LLM Extraction. Extracted data from the page following the schema defined.
              nullable: true
            warning:
              type: string
              description: Can be displayed when using LLM Extraction. Warning message will let you know any issues with the extraction.
              nullable: true
            changeTracking:
              type: object
              properties:
                previousScrapeAt:
                  type: string
                  description: The timestamp of the previous scrape that the current page is being compared against. Null if no previous scrape exists.
                  format: date-time
                  nullable: true
                changeStatus:
                  enum:
                    - new
                    - same
                    - changed
                    - removed
                  type: string
                  description: 'The result of the comparison between the two page versions. ''new'' means this page did not exist before, ''same'' means content has not changed, ''changed'' means content has changed, ''removed'' means the page was removed.'
                visibility:
                  enum:
                    - visible
                    - hidden
                  type: string
                  description: 'The visibility of the current page/URL. ''visible'' means the URL was discovered through an organic route (links or sitemap), ''hidden'' means the URL was discovered through memory from previous crawls.'
                diff:
                  type: string
                  description: Git-style diff of changes when using 'git-diff' mode. Only present when the mode is set to 'git-diff'.
                  nullable: true
                json:
                  type: object
                  description: 'JSON comparison results when using ''json'' mode. Only present when the mode is set to ''json''. This will emit a list of all the keys and their values from the `previous` and `current` scrapes based on the type defined in the `schema`. Example [here](/features/change-tracking)'
                  nullable: true
              description: Change tracking information if `changeTracking` is in `formats`. Only present when the `changeTracking` format is requested.
              nullable: true
    CrawlStatusResponseObj:
      type: object
      properties:
        status:
          type: string
          description: 'The current status of the crawl. Can be `scraping`, `completed`, or `failed`.'
        total:
          type: integer
          description: The total number of pages that were attempted to be crawled.
        completed:
          type: integer
          description: The number of pages that have been successfully crawled.
        creditsUsed:
          type: integer
          description: The number of credits used for the crawl.
        expiresAt:
          type: string
          description: The date and time when the crawl will expire.
          format: date-time
        next:
          type: string
          description: The URL to retrieve the next 10MB of data. Returned if the crawl is not completed or if the response is larger than 10MB.
          nullable: true
        data:
          type: array
          items:
            type: object
            properties:
              markdown:
                type: string
              html:
                type: string
                description: HTML version of the content on page if `includeHtml`  is true
                nullable: true
              rawHtml:
                type: string
                description: Raw HTML content of the page if `includeRawHtml`  is true
                nullable: true
              links:
                type: array
                items:
                  type: string
                description: List of links on the page if `includeLinks` is true
              screenshot:
                type: string
                description: Screenshot of the page if `includeScreenshot` is true
                nullable: true
              metadata:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  language:
                    type: string
                    nullable: true
                  sourceURL:
                    type: string
                    format: uri
                  '<any other metadata> ':
                    type: string
                  statusCode:
                    type: integer
                    description: The status code of the page
                  error:
                    type: string
                    description: The error message of the page
                    nullable: true
          description: The data of the crawl.
    CrawlErrorsResponseObj:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              timestamp:
                type: string
                description: ISO timestamp of failure
                nullable: true
              url:
                type: string
                description: Scraped URL
              error:
                type: string
                description: Error message
          description: Errored scrape jobs and error details
        robotsBlocked:
          type: array
          items:
            type: string
          description: List of URLs that were attempted in scraping but were blocked by robots.txt
    BatchScrapeStatusResponseObj:
      type: object
      properties:
        status:
          type: string
          description: 'The current status of the batch scrape. Can be `scraping`, `completed`, or `failed`.'
        total:
          type: integer
          description: The total number of pages that were attempted to be scraped.
        completed:
          type: integer
          description: The number of pages that have been successfully scraped.
        creditsUsed:
          type: integer
          description: The number of credits used for the batch scrape.
        expiresAt:
          type: string
          description: The date and time when the batch scrape will expire.
          format: date-time
        next:
          type: string
          description: The URL to retrieve the next 10MB of data. Returned if the batch scrape is not completed or if the response is larger than 10MB.
          nullable: true
        data:
          type: array
          items:
            type: object
            properties:
              markdown:
                type: string
              html:
                type: string
                description: HTML version of the content on page if `includeHtml`  is true
                nullable: true
              rawHtml:
                type: string
                description: Raw HTML content of the page if `includeRawHtml`  is true
                nullable: true
              links:
                type: array
                items:
                  type: string
                description: List of links on the page if `includeLinks` is true
              screenshot:
                type: string
                description: Screenshot of the page if `includeScreenshot` is true
                nullable: true
              metadata:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  language:
                    type: string
                    nullable: true
                  sourceURL:
                    type: string
                    format: uri
                  '<any other metadata> ':
                    type: string
                  statusCode:
                    type: integer
                    description: The status code of the page
                  error:
                    type: string
                    description: The error message of the page
                    nullable: true
          description: The data of the batch scrape.
    CrawlResponse:
      type: object
      properties:
        success:
          type: boolean
        id:
          type: string
        url:
          type: string
          format: uri
    BatchScrapeResponseObj:
      type: object
      properties:
        success:
          type: boolean
        id:
          type: string
        url:
          type: string
          format: uri
        invalidURLs:
          type: array
          items:
            type: string
          description: 'If ignoreInvalidURLs is true, this is an array containing the invalid URLs that were specified in the request. If there were no invalid URLs, this will be an empty array. If ignoreInvalidURLs is false, this field will be undefined.'
          nullable: true
    MapResponse:
      type: object
      properties:
        success:
          type: boolean
        links:
          type: array
          items:
            type: string
    ExtractResponse:
      type: object
      properties:
        success:
          type: boolean
        id:
          type: string
        invalidURLs:
          type: array
          items:
            type: string
          description: 'If ignoreInvalidURLs is true, this is an array containing the invalid URLs that were specified in the request. If there were no invalid URLs, this will be an empty array. If ignoreInvalidURLs is false, this field will be undefined.'
          nullable: true
    ExtractStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        status:
          enum:
            - completed
            - processing
            - failed
            - cancelled
          type: string
          description: The current status of the extract job
        expiresAt:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: [ ]